# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'rc.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

import pyvisa as visa
import sys
import numpy as np
import time as tm
import string

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(343, 653)
        MainWindow.setAutoFillBackground(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 0, 341, 131))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(10, 0, 91, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setTextFormat(QtCore.Qt.AutoText)
        self.label.setWordWrap(False)
        self.label.setObjectName("label")
        self.oscilloscope_addr = QtWidgets.QLineEdit(self.frame)
        self.oscilloscope_addr.setGeometry(QtCore.QRect(10, 49, 231, 20))
        self.oscilloscope_addr.setObjectName("oscilloscope_addr")
        self.oscilloscope_addr.setText("TCPIP::10.3.69.161::INSTR")
        self.oscilloscope_conn_butt = QtWidgets.QPushButton(self.frame)
        self.oscilloscope_conn_butt.setGeometry(QtCore.QRect(250, 49, 61, 21))
        self.oscilloscope_conn_butt.setObjectName("oscilloscope_conn_butt")
        self.oscilloscope_radio = QtWidgets.QRadioButton(self.frame)
        self.oscilloscope_radio.setGeometry(QtCore.QRect(320, 49, 21, 21))
        self.oscilloscope_radio.setText("")
        self.oscilloscope_radio.setCheckable(False)
        self.oscilloscope_radio.setChecked(False)
        self.oscilloscope_radio.setObjectName("oscilloscope_radio")
        self.label_3 = QtWidgets.QLabel(self.frame)
        self.label_3.setGeometry(QtCore.QRect(10, 30, 181, 20))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.frame)
        self.label_4.setGeometry(QtCore.QRect(10, 70, 181, 20))
        self.label_4.setObjectName("label_4")
        self.generator_conn_butt = QtWidgets.QPushButton(self.frame)
        self.generator_conn_butt.setGeometry(QtCore.QRect(250, 89, 61, 21))
        self.generator_conn_butt.setObjectName("generator_conn_butt")
        self.generator_addr = QtWidgets.QLineEdit(self.frame)
        self.generator_addr.setGeometry(QtCore.QRect(10, 89, 231, 20))
        self.generator_addr.setObjectName("generator_addr")
        self.generator_addr.setText("TCPIP::10.3.69.162::INSTR")
        self.generator_radio = QtWidgets.QRadioButton(self.frame)
        self.generator_radio.setGeometry(QtCore.QRect(320, 89, 21, 21))
        self.generator_radio.setText("")
        self.generator_radio.setCheckable(False)
        self.generator_radio.setChecked(False)
        self.generator_radio.setObjectName("generator_radio")
        self.logs_plain_text = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.logs_plain_text.setGeometry(QtCore.QRect(3, 510, 341, 141))
        self.logs_plain_text.setReadOnly(False)
        self.logs_plain_text.setObjectName("logs_plain_text")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(6, 491, 71, 20))
        self.label_2.setObjectName("label_2")
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setGeometry(QtCore.QRect(-1, 129, 341, 111))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.label_5 = QtWidgets.QLabel(self.frame_2)
        self.label_5.setGeometry(QtCore.QRect(10, 0, 101, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setTextFormat(QtCore.Qt.AutoText)
        self.label_5.setWordWrap(False)
        self.label_5.setObjectName("label_5")
        self.reset_osc_butt = QtWidgets.QPushButton(self.frame_2)
        self.reset_osc_butt.setGeometry(QtCore.QRect(10, 30, 321, 23))
        self.reset_osc_butt.setObjectName("reset_osc_butt")
        self.reset_gen_butt = QtWidgets.QPushButton(self.frame_2)
        self.reset_gen_butt.setGeometry(QtCore.QRect(10, 60, 321, 23))
        self.reset_gen_butt.setObjectName("reset_gen_butt")
        self.frame_3 = QtWidgets.QFrame(self.centralwidget)
        self.frame_3.setGeometry(QtCore.QRect(-1, 239, 341, 211))
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.label_6 = QtWidgets.QLabel(self.frame_3)
        self.label_6.setGeometry(QtCore.QRect(10, 0, 101, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setTextFormat(QtCore.Qt.AutoText)
        self.label_6.setWordWrap(False)
        self.label_6.setObjectName("label_6")
        self.freq = QtWidgets.QDoubleSpinBox(self.frame_3)
        self.freq.setGeometry(QtCore.QRect(50, 30, 101, 22))
        self.freq.setDecimals(5)
        self.freq.setMaximum(999999.99)
        self.freq.setSingleStep(0.01)
        self.freq.setObjectName("freq")
        self.freq.setValue(10000)
        self.label_7 = QtWidgets.QLabel(self.frame_3)
        self.label_7.setGeometry(QtCore.QRect(10, 31, 47, 21))
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.frame_3)
        self.label_8.setGeometry(QtCore.QRect(10, 61, 47, 21))
        self.label_8.setObjectName("label_8")
        self.delay = QtWidgets.QDoubleSpinBox(self.frame_3)
        self.delay.setGeometry(QtCore.QRect(50, 60, 101, 22))
        self.delay.setDecimals(5)
        self.delay.setMaximum(999.99)
        self.delay.setSingleStep(0.01)
        self.delay.setObjectName("delay")
        self.delay.setValue(0.00001)
        self.label_9 = QtWidgets.QLabel(self.frame_3)
        self.label_9.setGeometry(QtCore.QRect(160, 30, 47, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.frame_3)
        self.label_10.setGeometry(QtCore.QRect(160, 60, 47, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.frame_3)
        self.label_11.setGeometry(QtCore.QRect(160, 90, 47, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.label_15 = QtWidgets.QLabel(self.frame_3)
        self.label_15.setGeometry(QtCore.QRect(160, 120, 47, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_15.setFont(font)
        self.label_15.setObjectName("label_15")
        self.label_16 = QtWidgets.QLabel(self.frame_3)
        self.label_16.setGeometry(QtCore.QRect(160, 150, 47, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_16.setFont(font)
        self.label_16.setObjectName("label_16")
        self.label_17 = QtWidgets.QLabel(self.frame_3)
        self.label_17.setGeometry(QtCore.QRect(160, 180, 47, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_17.setFont(font)
        self.label_17.setObjectName("label_17")
        self.start_butt = QtWidgets.QPushButton(self.frame_3)
        self.start_butt.setGeometry(QtCore.QRect(190, 90, 131, 51))
        self.start_butt.setObjectName("start_butt")
        self.width = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.width.setGeometry(QtCore.QRect(50, 329, 101, 22))
        self.width.setDecimals(5)
        self.width.setMaximum(999.99)
        self.width.setSingleStep(0.01)
        self.width.setObjectName("width")
        self.width.setValue(100)
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(10, 330, 47, 21))
        self.label_12.setObjectName("label_12")
        self.lead = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.lead.setGeometry(QtCore.QRect(50, 359, 101, 22))
        self.lead.setDecimals(5)
        self.lead.setMaximum(999.99)
        self.lead.setSingleStep(0.01)
        self.lead.setObjectName("lead")
        self.lead.setValue(15)
        self.label_13 = QtWidgets.QLabel(self.centralwidget)
        self.label_13.setGeometry(QtCore.QRect(10, 360, 47, 21))
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(self.centralwidget)
        self.label_14.setGeometry(QtCore.QRect(10, 391, 47, 21))
        self.label_14.setObjectName("label_14")
        self.trail = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.trail.setGeometry(QtCore.QRect(50, 390, 101, 22))
        self.trail.setDecimals(5)
        self.trail.setMaximum(999.99)
        self.trail.setSingleStep(0.01)
        self.trail.setObjectName("trail")
        self.trail.setValue(8)
        self.Ampl = QtWidgets.QLabel(self.centralwidget)
        self.Ampl.setGeometry(QtCore.QRect(10, 421, 47, 21))
        self.Ampl.setObjectName("Ampl")
        self.ampl = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.ampl.setGeometry(QtCore.QRect(50, 420, 101, 22))
        self.ampl.setDecimals(5)
        self.ampl.setMaximum(9999.99)
        self.ampl.setSingleStep(0.01)
        self.ampl.setObjectName("ampl")
        self.ampl.setValue(2000)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Connecting"))
        self.oscilloscope_conn_butt.setText(_translate("MainWindow", "connect"))
        self.label_3.setText(_translate("MainWindow", "Oscilloscope"))
        self.label_4.setText(_translate("MainWindow", "Generator"))
        self.generator_conn_butt.setText(_translate("MainWindow", "connect"))
        self.label_2.setText(_translate("MainWindow", "Logs"))
        self.label_5.setText(_translate("MainWindow", "Control"))
        self.reset_osc_butt.setText(_translate("MainWindow", "Reset oscilloscope"))
        self.reset_gen_butt.setText(_translate("MainWindow", "Reset generator"))
        self.label_6.setText(_translate("MainWindow", "Pulse settings"))
        self.label_7.setText(_translate("MainWindow", "Freq:"))
        self.label_8.setText(_translate("MainWindow", "Delay:"))
        self.label_9.setText(_translate("MainWindow", "Hz"))
        self.label_10.setText(_translate("MainWindow", "s"))
        self.label_11.setText(_translate("MainWindow", "ns"))
        self.label_15.setText(_translate("MainWindow", "ns"))
        self.label_16.setText(_translate("MainWindow", "ns"))
        self.label_17.setText(_translate("MainWindow", "mV"))
        self.start_butt.setText(_translate("MainWindow", "Start"))
        self.label_12.setText(_translate("MainWindow", "Width:"))
        self.label_13.setText(_translate("MainWindow", "Lead:"))
        self.label_14.setText(_translate("MainWindow", "Trail:"))
        self.Ampl.setText(_translate("MainWindow", "Ampl:"))

class Stand(object):
    osc = visa.Resource
    gen = visa.Resource
    rm = visa.ResourceManager('@py')

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()

    # wav_form_dict = {
    # 0 : "ASCii",
    # 1 : "BYTE",
    # 2 : "WORD",
    # 3 : "LONG",
    # 4 : "LONGLONG",
    # }
    # acq_type_dict = {
    # 1 : "RAW",
    # 2 : "AVERage",
    # 3 : "VHIStogram",
    # 4 : "HHIStogram",
    # 6 : "INTerpolate",
    # 10 : "PDETect",
    # }
    # acq_mode_dict = {
    # 0 : "RTIMe",
    # 1 : "ETIMe",
    # 3 : "PDETect",
    # }
    # coupling_dict = {
    # 0 : "AC",
    # 1 : "DC",
    # 2 : "DCFIFTY",
    # 3 : "LFREJECT",
    # }
    # units_dict = {
    # 0 : "UNKNOWN",
    # 1 : "VOLT",
    # 2 : "SECOND",
    # 3 : "CONSTANT",
    # 4 : "AMP",
    # 5 : "DECIBEL",
    # }   

    def log(self, *log:str):
        history = self.ui.logs_plain_text.toPlainText()
        if history != "":
            history += "\n"

        res = ""
        for i in log:
            res +=str(i)
            
        self.ui.logs_plain_text.setPlainText(history+res)

    # need to add to check if error exists after send command 
    def detect_error(self)->str:
        err = self.query(self.osc, ":SYST:ERR? STR")
        return err

    def prep_osc(self):
        self.send_command(self.osc, ":CHAN1:PROB 1.0")
        # self.send_command(self.osc, ":SELECT:CH1 ON")
        # chose trig mode
        self.send_command(self.osc, ":TRIG:MODE EDGE")
        # trigger settings
        self.send_command(self.osc, ":TRIG:EDGE:SOUR CHAN1")
        self.send_command(self.osc, ":TRIG:LEV CHAN1, 1.5V")
        self.send_command(self.osc, ":TRIG:EDGE:SLOP POS")
        # setting type sweep
        self.send_command(self.osc, ":TRIG:SWE SING")

    def send_command(self, resource:visa.Resource , comm:str):
        try:
            resource.write(comm)
        except Exception as e:
            self.log("ERROR send_command:", e)
        self.log("Sended command:", comm)
    
    def query(self, resource:visa.Resource , comm:str) -> str:
        q = ""
        try:
            q = resource.query(comm)
        except Exception as e:
            self.log("ERROR query:", e)
        self.log("Sended command:", comm, "get query:", q)
        return q

    def connect_osc(self):
        try:
            self.osc = self.rm.open_resource(self.ui.oscilloscope_addr.text())
        except Exception as e:
            self.log("ERROR open_resourse:", e)
            return
        
        idn = self.query(self.osc, "*IDN?")
        if idn.find("MSOS204A") == -1:
            self.log("ERROR: it's to an oscilloscope, try again.")
            self.osc.close()
            return

        self.first_configure(self.osc)
        self.ui.oscilloscope_radio.setChecked(True)
        self.log("Succesfully connected oscilloscope")

    def connect_gen(self):
        try:
            self.gen = self.rm.open_resource(self.ui.generator_addr.text())
        except Exception as e:
            self.log("ERROR open_resourse:", e)
            return
        
        idn = self.query(self.gen, "*IDN?")
        if idn.find("811") == -1:
            self.log("ERROR: it's to an generator, try again.")
            self.gen.close()
            return

        self.first_configure(self.gen)
        self.ui.generator_radio.setChecked(True)
        self.log("Succesfully connected generator")

    def first_configure(self, resource:visa.Resource):
        resource.clear()
        resource.timeout = 5000
        resource.query_delay = 0.5 # changed was 1
        resource.chunk_size = 1_000_000 # changed was 128
        resource.term_chars = ""
        resource.read_termination = '\n'
        resource.write_termination = '\0'
        resource.baud_rate = 115200
        self.send_command(resource, "*CLS")
        self.send_command(resource, "*RST")

    def reset_resourse(self, resource:visa.Resource):
        self.send_command(resource, "*CLS")
        self.send_command(resource, "*RST")
        try:
            resource.close()
        except Exception as e:
            self.log("ERROR close resourse:", e)

    def reset_osc(self):
        self.reset_resourse(self.osc)
        self.ui.oscilloscope_radio.setChecked(False)
    
    def reset_osc_data(self):
        self.send_command(self.osc, "*CLS")
        self.send_command(self.osc, "*RST")        

    def reset_gen(self):
        self.reset_resourse(self.gen)
        self.ui.generator_radio.setChecked(False)

    def get_pulse_data(self)->dict:
        data = dict()
        data["f"] = self.ui.freq.value()
        data["d"] = self.ui.delay.value()
        data["w"] = self.ui.width.value()
        data["l"] = self.ui.lead.value()
        data["t"] = self.ui.trail.value()
        data["a"] = self.ui.ampl.value()
        return data
    
    def configure_gen_sample(self, data:dict):
        self.send_command(self.gen, ":FUNC PULS")
        self.send_command(self.gen, ":FREQ "+str(data["f"])+"Hz")
        self.send_command(self.gen, ":VOLT:HIGH "+str(data["a"]/2)+"mV")
        self.send_command(self.gen, ":VOLT:LOW 0V")
        self.send_command(self.gen, ":FUNC:PULS:WIDT "+str(data["w"])+"ns")
        self.send_command(self.gen, ":FUNC:PULS:DEL "+str(data["d"])+"s")
        self.send_command(self.gen, ":FUNC:PULS:TRAN "+str(data["l"])+"ns")
        self.send_command(self.gen, ":FUNC:PULS:TRAN:TRA "+str(data["t"])+"ns")

    def controller_connect_osc_butt(self):
        self.connect_osc()

    def controller_connect_gen_butt(self):
        self.connect_gen()

    def controller_reset_osc_butt(self):
        self.reset_osc()
    
    def controller_reset_gen_butt(self):
        self.reset_gen()

    def controller_start_butt(self):
        self.reset_osc_data()
        self.send_command(self.gen, ":OUTP1 ON")
        self.configure_gen_sample(self.get_pulse_data())
        self.prep_osc()
        self.send_command(self.osc, ":SING")
        
        tm.sleep(0.5)
        self.send_command(self.osc, ":MEAS:SOUR CHAN1")
        tm.sleep(0.5)
        print("amplitude:", self.query(self.osc, ":MEAS:VAMP? CHANnel1"))
        print("edge", self.query(self.osc, ":MEASure:EDGE? CHANnel1"))
        print("fall", self.query(self.osc, ":MEASure:FALLtime? CHANnel1"))
        # pre_string = self.query(self.osc, ":WAV:PRE?")
        # (
        # wav_form, acq_type, wfmpts, avgcnt, x_increment, x_origin,
        # x_reference, y_increment, y_origin, y_reference, coupling,
        # x_display_range, x_display_origin, y_display_range,
        # y_display_origin, date, time, frame_model, acq_mode,
        # completion, x_units, y_units, max_bw_limit, min_bw_limit
        # ) = pre_string.split(",")

        # print("Waveform format: %s" % self.wav_form_dict[int(wav_form)])
        # print("Acquire type: %s" % self.acq_type_dict[int(acq_type)])
        # print("Waveform points desired: %s" % wfmpts)
        # print("Waveform average count: %s" % avgcnt)
        # print("Waveform X increment: %s" % x_increment)
        # print("Waveform X origin: %s" % x_origin)
        # print("Waveform X reference: %s" % x_reference) # Always 0.
        # print("Waveform Y increment: %s" % y_increment)
        # print("Waveform Y origin: %s" % y_origin)
        # print("Waveform Y reference: %s" % y_reference) # Always 0.
        # print("Coupling: %s" % self.coupling_dict[int(coupling)])
        # print("Waveform X display range: %s" % x_display_range)
        # print("Waveform X display origin: %s" % x_display_origin)
        # print("Waveform Y display range: %s" % y_display_range)
        # print("Waveform Y display origin: %s" % y_display_origin)
        # print("Date: %s" % date)
        # print("Time: %s" % time)
        # print("Frame model #: %s" % frame_model)
        # print("Acquire mode: %s" % self.acq_mode_dict[int(acq_mode)])
        # print("Completion pct: %s" % completion)
        # print("Waveform X units: %s" % self.units_dict[int(x_units)])
        # print("Waveform Y units: %s" % self.units_dict[int(y_units)])
        # print("Max BW limit: %s" % max_bw_limit)
        # print("Min BW limit: %s" % min_bw_limit)

        size = 10000
        tm.sleep(0.5)
        self.send_command(self.osc, ":DISPlay:DATA? PNG")
        tm.sleep(0.5)
        counter = 0
        f = open("data.png", "wb")
        arr = []
        bts = b''
        while True:
            try:
                data = self.osc.read_bytes(size)
                arr.append(data)
                bts+=data
                counter += 1
            except:
                try:
                    f.write(bts[7:])
                except Exception as e:
                    print("can't save file: ", e)
                f.close()
                break

        

if __name__ == "__main__":
    stand = Stand()
    stand.ui.setupUi(stand.MainWindow)
    stand.MainWindow.show()
    stand.ui.oscilloscope_conn_butt.clicked.connect(stand.controller_connect_osc_butt)
    stand.ui.generator_conn_butt.clicked.connect(stand.controller_connect_gen_butt)
    stand.ui.reset_osc_butt.clicked.connect(stand.controller_reset_osc_butt)
    stand.ui.reset_gen_butt.clicked.connect(stand.controller_reset_gen_butt)
    stand.ui.start_butt.clicked.connect(stand.controller_start_butt)
    sys.exit(stand.app.exec_())


# Agilent Technologies,81150A,MY53820800,3.0.0.0-4.6
# KEYSIGHT TECHNOLOGIES,MSOS204A,MY55510132,05.70.00714

"""
Надо поделить на классы UI и visa коннекты. И сделать один общий класс для стенда.

TCPIP::10.3.69.161::INSTR
TCPIP::10.3.69.162::INSTR
TCPIP::10.3.69.161::hislip0,4880::INSTR
"""


